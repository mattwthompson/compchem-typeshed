from rdkit import RDConfig as RDConfig
from rdkit.ML.Descriptors import Descriptors as Descriptors, Parser as Parser
from rdkit.utils import chemutils as chemutils
from typing import Any

countOptions: Any

def GetAllDescriptorNames(db, tbl1, tbl2, user: str = ..., password: str = ...): ...

class CompoundDescriptorCalculator(Descriptors.DescriptorCalculator):
    def SUM(self, desc, compos): ...
    def MEAN(self, desc, compos): ...
    def DEV(self, desc, compos): ...
    def MIN(self, desc, compos): ...
    def MAX(self, desc, compos): ...
    nonZeroDescriptors: Any
    requiredDescriptors: Any
    def ProcessSimpleList(self): ...
    def ProcessCompoundList(self) -> None: ...
    atomDict: Any
    def BuildAtomDict(self) -> None: ...
    def CalcSimpleDescriptorsForComposition(self, compos: str = ..., composList: Any | None = ...): ...
    def CalcCompoundDescriptorsForComposition(self, compos: str = ..., composList: Any | None = ..., propDict=...): ...
    def CalcDescriptorsForComposition(self, composVect, propDict): ...
    CalcDescriptors: Any
    descriptorNames: Any
    def GetDescriptorNames(self): ...
    simpleList: Any
    compoundList: Any
    dbName: Any
    dbTable: Any
    dbUser: Any
    dbPassword: Any
    def __init__(self, simpleList, compoundList: Any | None = ..., dbName: Any | None = ..., dbTable: str = ..., dbUser: str = ..., dbPassword: str = ...) -> None: ...
