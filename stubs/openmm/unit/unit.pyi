from .standard_dimensions import *
from .baseunit import BaseUnit as BaseUnit
from .mymatrix import MyMatrix as MyMatrix, zeros as zeros
from collections.abc import Generator
from typing import Any

class Unit:
    __array_priority__: int
    def __init__(self, base_or_scaled_units) -> None: ...
    def create_unit(self, scale, name, symbol): ...
    def iter_base_dimensions(self) -> Generator[Any, None, None]: ...
    def iter_all_base_units(self) -> Generator[Any, None, None]: ...
    def iter_top_base_units(self) -> Generator[Any, None, None]: ...
    def iter_scaled_units(self) -> Generator[Any, None, None]: ...
    def iter_base_or_scaled_units(self) -> Generator[Any, None, None]: ...
    def get_conversion_factor_to_base_units(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __hash__(self): ...
    def __truediv__(self, other): ...
    __div__: Any
    def __pow__(self, exponent): ...
    def sqrt(self): ...
    def is_compatible(self, other): ...
    def is_dimensionless(self): ...
    def conversion_factor_to(self, other): ...
    def in_unit_system(self, system): ...
    def get_symbol(self): ...
    def get_name(self): ...

class ScaledUnit:
    __array_priority__: int
    factor: Any
    base_units: Any
    master: Any
    name: Any
    symbol: Any
    def __init__(self, factor, master, name, symbol) -> None: ...
    def __iter__(self): ...
    def iter_base_units(self) -> Generator[Any, None, None]: ...
    def iter_base_dimensions(self) -> Generator[Any, None, None]: ...
    def get_dimension_tuple(self): ...
    def get_conversion_factor_to_base_units(self): ...
    def conversion_factor_to(self, other): ...
    def __lt__(self, other): ...

class UnitSystem:
    units: Any
    base_units: Any
    dimensions: Any
    from_base_units: Any
    def __init__(self, units) -> None: ...
    def __iter__(self): ...
    def express_unit(self, old_unit): ...

def is_unit(x): ...

dimensionless: Any
