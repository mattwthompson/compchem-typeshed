from types import *
from . import pdfmetrics as pdfmetrics, pdfutils as pdfutils
from .pdfgeom import bezierArc as bezierArc
from .pdfutils import LINEEND as LINEEND
from math import ceil as ceil, cos as cos, pi as pi, sin as sin
from typing import Any

StandardEnglishFonts: Any
PDFError: str
AFMDIR: str
A4: Any

class PDFDocument:
    objects: Any
    objectPositions: Any
    fonts: Any
    fontMapping: Any
    pages: Any
    pagepositions: Any
    PageCol: Any
    fontdict: Any
    info: Any
    infopos: Any
    def __init__(self) -> None: ...
    def add(self, key, obj): ...
    def getPosition(self, key): ...
    def setTitle(self, title) -> None: ...
    def setAuthor(self, author) -> None: ...
    def setSubject(self, subject) -> None: ...
    startxref: Any
    def printXref(self) -> None: ...
    def writeXref(self, f) -> None: ...
    def printTrailer(self) -> None: ...
    def writeTrailer(self, f) -> None: ...
    def SaveToFile(self, filename) -> None: ...
    xref: Any
    def SaveToFileObject(self, fileobj) -> None: ...
    def printPDF(self) -> None: ...
    def addPage(self, page) -> None: ...
    def hasFont(self, psfontname): ...
    def getInternalFontName(self, psfontname): ...
    def getAvailableFonts(self): ...

class OutputGrabber:
    oldoutput: Any
    closed: int
    data: Any
    def __init__(self) -> None: ...
    def write(self, x) -> None: ...
    def getData(self): ...
    def close(self) -> None: ...
    def __del__(self) -> None: ...

def testOutputGrabber() -> None: ...

class PDFObject:
    def save(self, file) -> None: ...
    def printPDF(self) -> None: ...

class PDFLiteral(PDFObject):
    text: Any
    def __init__(self, text) -> None: ...
    def save(self, file) -> None: ...

class PDFCatalog(PDFObject):
    template: Any
    def __init__(self) -> None: ...
    def save(self, file) -> None: ...

class PDFInfo(PDFObject):
    title: str
    author: str
    subject: str
    datestr: Any
    def __init__(self) -> None: ...
    def save(self, file) -> None: ...

class PDFOutline(PDFObject):
    template: Any
    def __init__(self) -> None: ...
    def save(self, file) -> None: ...

class PDFPageCollection(PDFObject):
    PageList: Any
    def __init__(self) -> None: ...
    def save(self, file) -> None: ...

class PDFPage(PDFObject):
    drawables: Any
    pagewidth: int
    pageheight: int
    stream: Any
    hasImages: int
    pageTransitionString: str
    template: Any
    def __init__(self) -> None: ...
    def setCompression(self, onoff: int = ...) -> None: ...
    def save(self, file) -> None: ...
    def clear(self) -> None: ...
    def setStream(self, data) -> None: ...

TestStream: str

class PDFStream(PDFObject):
    data: Any
    compression: int
    def __init__(self) -> None: ...
    def setStream(self, data) -> None: ...
    def save(self, file) -> None: ...

class PDFImage(PDFObject):
    def save(self, file) -> None: ...

class PDFType1Font(PDFObject):
    fontname: Any
    keyname: Any
    template: Any
    def __init__(self, key, font) -> None: ...
    def save(self, file) -> None: ...

def MakeType1Fonts(): ...
def MakeFontDictionary(startpos, count): ...
