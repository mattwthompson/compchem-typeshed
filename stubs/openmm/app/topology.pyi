from collections.abc import Generator
from openmm.unit import is_quantity as is_quantity, nanometers as nanometers, sqrt as sqrt
from openmm.vec3 import Vec3 as Vec3
from typing import Any

class Single(object): ...
class Double(object): ...
class Triple(object): ...
class Aromatic(object): ...
class Amide(object): ...

class Topology:
    def __init__(self) -> None: ...
    def getNumAtoms(self): ...
    def getNumResidues(self): ...
    def getNumChains(self): ...
    def getNumBonds(self): ...
    def addChain(self, id: Any | None = ...): ...
    def addResidue(self, name, chain, id: Any | None = ..., insertionCode: str = ...): ...
    def addAtom(self, name, element, residue, id: Any | None = ...): ...
    def addBond(self, atom1, atom2, type: Any | None = ..., order: Any | None = ...) -> None: ...
    def chains(self): ...
    def residues(self) -> Generator[Any, None, None]: ...
    def atoms(self) -> Generator[Any, None, None]: ...
    def bonds(self): ...
    def getPeriodicBoxVectors(self): ...
    def setPeriodicBoxVectors(self, vectors) -> None: ...
    def getUnitCellDimensions(self): ...
    def setUnitCellDimensions(self, dimensions) -> None: ...
    @staticmethod
    def loadBondDefinitions(file) -> None: ...
    def createStandardBonds(self) -> None: ...
    def createDisulfideBonds(self, positions): ...

class Chain:
    index: Any
    topology: Any
    id: Any
    def __init__(self, index, topology, id) -> None: ...
    def residues(self): ...
    def atoms(self) -> Generator[Any, None, None]: ...
    def __len__(self): ...

class Residue:
    name: Any
    index: Any
    chain: Any
    id: Any
    insertionCode: Any
    def __init__(self, name, index, chain, id, insertionCode) -> None: ...
    def atoms(self): ...
    def bonds(self): ...
    def internal_bonds(self): ...
    def external_bonds(self): ...
    def __len__(self): ...

class Atom:
    name: Any
    element: Any
    index: Any
    residue: Any
    id: Any
    def __init__(self, name, element, index, residue, id) -> None: ...

class Bond:
    def __new__(cls, atom1, atom2, type: Any | None = ..., order: Any | None = ...): ...
    def __getnewargs__(self): ...
    def __deepcopy__(self, memo): ...
