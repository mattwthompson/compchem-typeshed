from openmm.vec3 import Vec3 as Vec3
from typing import Any, Union, Set

class _SwigNonDynamicMeta(type):
    __setattr__: Any

class ios_base:
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    erase_event: Any
    imbue_event: Any
    copyfmt_event: Any
    def register_callback(self, __fn, __index): ...
    def flags(self, *args): ...
    def setf(self, *args): ...
    def unsetf(self, __mask): ...
    def precision(self, *args): ...
    def width(self, *args): ...
    @staticmethod
    def sync_with_stdio(__sync: bool = ...): ...
    def imbue(self, __loc): ...
    def getloc(self): ...
    @staticmethod
    def xalloc(): ...
    def iword(self, __ix): ...
    def pword(self, __ix): ...
    __swig_destroy__: Any

cvar: Any

def ios_base_sync_with_stdio(__sync: bool = ...): ...
def ios_base_xalloc(): ...

class ios(ios_base):
    thisown: Any
    def rdstate(self): ...
    def clear(self, *args): ...
    def setstate(self, __state): ...
    def good(self): ...
    def eof(self): ...
    def fail(self): ...
    def bad(self): ...
    def exceptions(self, *args): ...
    def __init__(self, __sb) -> None: ...
    __swig_destroy__: Any
    def tie(self, *args): ...
    def rdbuf(self, *args): ...
    def copyfmt(self, __rhs): ...
    def fill(self, *args): ...
    def imbue(self, __loc): ...
    def narrow(self, __c, __dfault): ...
    def widen(self, __c): ...

class ostream(ios):
    thisown: Any
    def __init__(self, __sb) -> None: ...
    __swig_destroy__: Any
    def __lshift__(self, *args): ...
    def put(self, __c): ...
    def write(self, __s, __n): ...
    def flush(self): ...
    def tellp(self): ...
    def seekp(self, *args): ...

cin: Any
cout: Any
cerr: Any
clog: Any

class istream(ios):
    thisown: Any
    def __init__(self, __sb) -> None: ...
    __swig_destroy__: Any
    def __rshift__(self, *args): ...
    def gcount(self): ...
    def get(self, *args): ...
    def getline(self, *args): ...
    def ignore(self, *args): ...
    def peek(self): ...
    def read(self, __s, __n): ...
    def readsome(self, __s, __n): ...
    def putback(self, __c): ...
    def unget(self): ...
    def sync(self): ...
    def tellg(self): ...
    def seekg(self, *args): ...

class iostream(istream, ostream):
    thisown: Any
    def __init__(self, __sb) -> None: ...
    __swig_destroy__: Any

endl_cb_ptr: Any
endl: Any
ends_cb_ptr: Any
ends: Any
flush_cb_ptr: Any
flush: Any

class pairii:
    thisown: Any
    def __init__(self, *args) -> None: ...
    first: Any
    second: Any
    def __len__(self): ...
    def __getitem__(self, index): ...
    def __setitem__(self, index, val) -> None: ...
    __swig_destroy__: Any

class vectord:
    thisown: Any
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self): ...
    def __len__(self): ...
    def __getslice__(self, i, j): ...
    def __setslice__(self, *args): ...
    def __delslice__(self, i, j): ...
    def __delitem__(self, *args): ...
    def __getitem__(self, *args): ...
    def __setitem__(self, *args): ...
    def pop(self): ...
    def append(self, x): ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def pop_back(self): ...
    def erase(self, *args): ...
    def __init__(self, *args) -> None: ...
    def push_back(self, x): ...
    def front(self): ...
    def back(self): ...
    def assign(self, n, x): ...
    def resize(self, *args): ...
    def insert(self, *args): ...
    def reserve(self, n): ...
    def capacity(self): ...
    __swig_destroy__: Any

class vectorddd:
    thisown: Any
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self): ...
    def __len__(self): ...
    def __getslice__(self, i, j): ...
    def __setslice__(self, *args): ...
    def __delslice__(self, i, j): ...
    def __delitem__(self, *args): ...
    def __getitem__(self, *args): ...
    def __setitem__(self, *args): ...
    def pop(self): ...
    def append(self, x): ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def pop_back(self): ...
    def erase(self, *args): ...
    def __init__(self, *args) -> None: ...
    def push_back(self, x): ...
    def front(self): ...
    def back(self): ...
    def assign(self, n, x): ...
    def resize(self, *args): ...
    def insert(self, *args): ...
    def reserve(self, n): ...
    def capacity(self): ...
    __swig_destroy__: Any

class vectori:
    thisown: Any
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self): ...
    def __len__(self): ...
    def __getslice__(self, i, j): ...
    def __setslice__(self, *args): ...
    def __delslice__(self, i, j): ...
    def __delitem__(self, *args): ...
    def __getitem__(self, *args): ...
    def __setitem__(self, *args): ...
    def pop(self): ...
    def append(self, x): ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def pop_back(self): ...
    def erase(self, *args): ...
    def __init__(self, *args) -> None: ...
    def push_back(self, x): ...
    def front(self): ...
    def back(self): ...
    def assign(self, n, x): ...
    def resize(self, *args): ...
    def insert(self, *args): ...
    def reserve(self, n): ...
    def capacity(self): ...
    __swig_destroy__: Any

class vectorii:
    thisown: Any
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self): ...
    def __len__(self): ...
    def __getslice__(self, i, j): ...
    def __setslice__(self, *args): ...
    def __delslice__(self, i, j): ...
    def __delitem__(self, *args): ...
    def __getitem__(self, *args): ...
    def __setitem__(self, *args): ...
    def pop(self): ...
    def append(self, x): ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def pop_back(self): ...
    def erase(self, *args): ...
    def __init__(self, *args) -> None: ...
    def push_back(self, x): ...
    def front(self): ...
    def back(self): ...
    def assign(self, n, x): ...
    def resize(self, *args): ...
    def insert(self, *args): ...
    def reserve(self, n): ...
    def capacity(self): ...
    __swig_destroy__: Any

class vectorpairii:
    thisown: Any
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self): ...
    def __len__(self): ...
    def __getslice__(self, i, j): ...
    def __setslice__(self, *args): ...
    def __delslice__(self, i, j): ...
    def __delitem__(self, *args): ...
    def __getitem__(self, *args): ...
    def __setitem__(self, *args): ...
    def pop(self): ...
    def append(self, x): ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def pop_back(self): ...
    def erase(self, *args): ...
    def __init__(self, *args) -> None: ...
    def push_back(self, x): ...
    def front(self): ...
    def back(self): ...
    def assign(self, n, x): ...
    def resize(self, *args): ...
    def insert(self, *args): ...
    def reserve(self, n): ...
    def capacity(self): ...
    __swig_destroy__: Any

class vectorstring:
    thisown: Any
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self): ...
    def __len__(self): ...
    def __getslice__(self, i, j): ...
    def __setslice__(self, *args): ...
    def __delslice__(self, i, j): ...
    def __delitem__(self, *args): ...
    def __getitem__(self, *args): ...
    def __setitem__(self, *args): ...
    def pop(self): ...
    def append(self, x): ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def pop_back(self): ...
    def erase(self, *args): ...
    def __init__(self, *args) -> None: ...
    def push_back(self, x): ...
    def front(self): ...
    def back(self): ...
    def assign(self, n, x): ...
    def resize(self, *args): ...
    def insert(self, *args): ...
    def reserve(self, n): ...
    def capacity(self): ...
    __swig_destroy__: Any

class mapstringstring:
    thisown: Any
    def iterator(self): ...
    def __nonzero__(self): ...
    def __bool__(self): ...
    def __len__(self): ...
    def __iter__(self): ...
    def iterkeys(self): ...
    def itervalues(self): ...
    def iteritems(self): ...
    def __getitem__(self, key): ...
    def __delitem__(self, key): ...
    def has_key(self, key): ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def __contains__(self, key): ...
    def key_iterator(self): ...
    def value_iterator(self): ...
    def __setitem__(self, *args): ...
    def asdict(self): ...
    def __init__(self, *args) -> None: ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def count(self, x): ...
    def erase(self, *args): ...
    def find(self, x): ...
    def lower_bound(self, x): ...
    def upper_bound(self, x): ...
    __swig_destroy__: Any

class mapstringdouble:
    thisown: Any
    def iterator(self): ...
    def __nonzero__(self): ...
    def __bool__(self): ...
    def __len__(self): ...
    def __iter__(self): ...
    def iterkeys(self): ...
    def itervalues(self): ...
    def iteritems(self): ...
    def __getitem__(self, key): ...
    def __delitem__(self, key): ...
    def has_key(self, key): ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def __contains__(self, key): ...
    def key_iterator(self): ...
    def value_iterator(self): ...
    def __setitem__(self, *args): ...
    def asdict(self): ...
    def __init__(self, *args) -> None: ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def count(self, x): ...
    def erase(self, *args): ...
    def find(self, x): ...
    def lower_bound(self, x): ...
    def upper_bound(self, x): ...
    __swig_destroy__: Any

class mapii:
    thisown: Any
    def iterator(self): ...
    def __nonzero__(self): ...
    def __bool__(self): ...
    def __len__(self): ...
    def __iter__(self): ...
    def iterkeys(self): ...
    def itervalues(self): ...
    def iteritems(self): ...
    def __getitem__(self, key): ...
    def __delitem__(self, key): ...
    def has_key(self, key): ...
    def keys(self): ...
    def values(self): ...
    def items(self): ...
    def __contains__(self, key): ...
    def key_iterator(self): ...
    def value_iterator(self): ...
    def __setitem__(self, *args): ...
    def asdict(self): ...
    def __init__(self, *args) -> None: ...
    def empty(self): ...
    def size(self): ...
    def swap(self, v): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def clear(self): ...
    def get_allocator(self): ...
    def count(self, x): ...
    def erase(self, *args): ...
    def find(self, x): ...
    def lower_bound(self, x): ...
    def upper_bound(self, x): ...
    __swig_destroy__: Any

class seti:
    thisown: Any
    def iterator(self): ...
    def __iter__(self): ...
    def __nonzero__(self): ...
    def __bool__(self): ...
    def __len__(self): ...
    def append(self, x): ...
    def __contains__(self, x): ...
    def __getitem__(self, i): ...
    def add(self, x): ...
    def discard(self, x): ...
    def __init__(self, *args) -> None: ...
    def empty(self): ...
    def size(self): ...
    def clear(self): ...
    def swap(self, v): ...
    def count(self, x): ...
    def begin(self): ...
    def end(self): ...
    def rbegin(self): ...
    def rend(self): ...
    def erase(self, *args): ...
    def find(self, x): ...
    def lower_bound(self, x): ...
    def upper_bound(self, x): ...
    def equal_range(self, x): ...
    def insert(self, __x): ...
    __swig_destroy__: Any

RMIN_PER_SIGMA: Any
RVDW_PER_SIGMA: Any

class Force:
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any
    def getForceGroup(self): ...
    def setForceGroup(self, group): ...
    def getName(self): ...
    def setName(self, name): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __deepcopy__(self, memo): ...
    def __copy__(self): ...

NmPerAngstrom: Any
AngstromsPerNm: Any
PsPerFs: Any
FsPerPs: Any
KJPerKcal: Any
KcalPerKJ: Any
RadiansPerDegree: Any
DegreesPerRadian: Any
SigmaPerVdwRadius: Any
VdwRadiusPerSigma: Any

class AmoebaVdwForce(Force):
    thisown: Any
    NoCutoff: Any
    CutoffPeriodic: Any
    Buffered147: Any
    LennardJones: Any
    Decouple: Any
    Annihilate: Any
    @staticmethod
    def Lambda(): ...
    def getNumParticles(self): ...
    def getNumParticleTypes(self): ...
    def getNumTypePairs(self): ...
    def setParticleParameters(
        self,
        particleIndex,
        parentIndex,
        sigma,
        epsilon,
        reductionFactor,
        isAlchemical: bool = ...,
        typeIndex: int = ...,
    ): ...
    def getParticleParameters(self, particleIndex): ...
    def addParticle(self, *args): ...
    def addParticleType(self, sigma, epsilon): ...
    def getParticleTypeParameters(self, typeIndex): ...
    def setParticleTypeParameters(self, typeIndex, sigma, epsilon): ...
    def addTypePair(self, type1, type2, sigma, epsilon): ...
    def getTypePairParameters(self, pairIndex): ...
    def setTypePairParameters(self, pairIndex, type1, type2, sigma, epsilon): ...
    def setSigmaCombiningRule(self, sigmaCombiningRule): ...
    def getSigmaCombiningRule(self): ...
    def setEpsilonCombiningRule(self, epsilonCombiningRule): ...
    def getEpsilonCombiningRule(self): ...
    def getUseDispersionCorrection(self): ...
    def setUseDispersionCorrection(self, useCorrection): ...
    def getUseParticleTypes(self): ...
    def setParticleExclusions(self, particleIndex, exclusions): ...
    def getParticleExclusions(self, particleIndex): ...
    def getCutoffDistance(self): ...
    def setCutoffDistance(self, distance): ...
    def setCutoff(self, cutoff): ...
    def getCutoff(self): ...
    def getNonbondedMethod(self): ...
    def setNonbondedMethod(self, method): ...
    def getPotentialFunction(self): ...
    def setPotentialFunction(self, potential): ...
    def setSoftcorePower(self, n): ...
    def getSoftcorePower(self): ...
    def setSoftcoreAlpha(self, alpha): ...
    def getSoftcoreAlpha(self): ...
    def getAlchemicalMethod(self): ...
    def setAlchemicalMethod(self, method): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

def AmoebaVdwForce_Lambda(): ...

class Context:
    thisown: Any
    __swig_destroy__: Any
    def getSystem(self): ...
    def getPlatform(self, *args): ...
    def setState(self, state): ...
    def getTime(self): ...
    def setTime(self, time): ...
    def getStepCount(self): ...
    def setStepCount(self, count): ...
    def setPositions(self, positions): ...
    def setVelocities(self, velocities): ...
    def setVelocitiesToTemperature(self, *args): ...
    def getParameters(self): ...
    def getParameter(self, name): ...
    def setParameter(self, name, value): ...
    def setPeriodicBoxVectors(self, a, b, c): ...
    def applyConstraints(self, tol): ...
    def applyVelocityConstraints(self, tol): ...
    def computeVirtualSites(self): ...
    def reinitialize(self, preserveState: bool = ...): ...
    def getMolecules(self): ...
    def getIntegrator(self): ...
    def getState(
        self,
        getPositions: bool = ...,
        getVelocities: bool = ...,
        getForces: bool = ...,
        getEnergy: bool = ...,
        getParameters: bool = ...,
        getParameterDerivatives: bool = ...,
        getIntegratorParameters: bool = ...,
        enforcePeriodicBox: bool = ...,
        groups: Union[int, Set[int]] = ...,
    ): ...
    def createCheckpoint(self): ...
    def loadCheckpoint(self, checkpoint): ...
    def __init__(self, *args) -> None: ...

class DrudeForce(Force):
    thisown: Any
    def getNumParticles(self): ...
    def getNumScreenedPairs(self): ...
    def addParticle(
        self,
        particle,
        particle1,
        particle2,
        particle3,
        particle4,
        charge,
        polarizability,
        aniso12,
        aniso34,
    ): ...
    def getParticleParameters(self, index): ...
    def setParticleParameters(
        self,
        index,
        particle,
        particle1,
        particle2,
        particle3,
        particle4,
        charge,
        polarizability,
        aniso12,
        aniso34,
    ): ...
    def addScreenedPair(self, particle1, particle2, thole): ...
    def getScreenedPairParameters(self, index): ...
    def setScreenedPairParameters(self, index, particle1, particle2, thole): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class Integrator:
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any
    def getStepSize(self): ...
    def setStepSize(self, size): ...
    def getConstraintTolerance(self): ...
    def setConstraintTolerance(self, tol): ...
    def step(self, steps): ...
    def getIntegrationForceGroups(self): ...
    def setIntegrationForceGroups(self, groups) -> None: ...
    def __deepcopy__(self, memo): ...
    def __copy__(self): ...

class DrudeIntegrator(Integrator):
    thisown: Any
    def step(self, steps): ...
    def getDrudeTemperature(self): ...
    def setDrudeTemperature(self, temp): ...
    def getMaxDrudeDistance(self): ...
    def setMaxDrudeDistance(self, distance): ...
    def setRandomNumberSeed(self, seed): ...
    def getRandomNumberSeed(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class TabulatedFunction:
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any
    def Copy(self): ...
    def getPeriodic(self): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __deepcopy__(self, memo): ...
    def __copy__(self): ...

class Discrete2DFunction(TabulatedFunction):
    thisown: Any
    def __init__(self, xsize, ysize, values) -> None: ...
    def getFunctionParameters(self): ...
    def setFunctionParameters(self, xsize, ysize, values): ...
    def Copy(self): ...
    def __eq__(self, other): ...
    __swig_destroy__: Any

class CustomAngleForce(Force):
    thisown: Any
    def getNumAngles(self): ...
    def getNumPerAngleParameters(self): ...
    def getNumGlobalParameters(self): ...
    def getNumEnergyParameterDerivatives(self): ...
    def getEnergyFunction(self): ...
    def setEnergyFunction(self, energy): ...
    def addPerAngleParameter(self, name): ...
    def getPerAngleParameterName(self, index): ...
    def setPerAngleParameterName(self, index, name): ...
    def addGlobalParameter(self, name, defaultValue): ...
    def getGlobalParameterName(self, index): ...
    def setGlobalParameterName(self, index, name): ...
    def getGlobalParameterDefaultValue(self, index): ...
    def setGlobalParameterDefaultValue(self, index, defaultValue): ...
    def addEnergyParameterDerivative(self, name): ...
    def getEnergyParameterDerivativeName(self, index): ...
    def addAngle(self, *args): ...
    def getAngleParameters(self, index): ...
    def setAngleParameters(self, *args): ...
    def updateParametersInContext(self, context): ...
    def setUsesPeriodicBoundaryConditions(self, periodic): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class CustomNonbondedForce(Force):
    thisown: Any
    NoCutoff: Any
    CutoffNonPeriodic: Any
    CutoffPeriodic: Any
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any
    def getNumParticles(self): ...
    def getNumExclusions(self): ...
    def getNumPerParticleParameters(self): ...
    def getNumGlobalParameters(self): ...
    def getNumTabulatedFunctions(self): ...
    def getNumFunctions(self): ...
    def getNumInteractionGroups(self): ...
    def getNumEnergyParameterDerivatives(self): ...
    def getEnergyFunction(self): ...
    def setEnergyFunction(self, energy): ...
    def getNonbondedMethod(self): ...
    def setNonbondedMethod(self, method): ...
    def getCutoffDistance(self): ...
    def setCutoffDistance(self, distance): ...
    def getUseSwitchingFunction(self): ...
    def setUseSwitchingFunction(self, use): ...
    def getSwitchingDistance(self): ...
    def setSwitchingDistance(self, distance): ...
    def getUseLongRangeCorrection(self): ...
    def setUseLongRangeCorrection(self, use): ...
    def addPerParticleParameter(self, name): ...
    def getPerParticleParameterName(self, index): ...
    def setPerParticleParameterName(self, index, name): ...
    def addGlobalParameter(self, name, defaultValue): ...
    def getGlobalParameterName(self, index): ...
    def setGlobalParameterName(self, index, name): ...
    def getGlobalParameterDefaultValue(self, index): ...
    def setGlobalParameterDefaultValue(self, index, defaultValue): ...
    def addEnergyParameterDerivative(self, name): ...
    def getEnergyParameterDerivativeName(self, index): ...
    def addParticle(self, *args): ...
    def getParticleParameters(self, index): ...
    def setParticleParameters(self, index, parameters): ...
    def addExclusion(self, particle1, particle2): ...
    def getExclusionParticles(self, index): ...
    def setExclusionParticles(self, index, particle1, particle2): ...
    def createExclusionsFromBonds(self, bonds, bondCutoff): ...
    def addTabulatedFunction(self, name, function): ...
    def getTabulatedFunction(self, *args): ...
    def getTabulatedFunctionName(self, index): ...
    def addFunction(self, name, values, min, max): ...
    def getFunctionParameters(self, index): ...
    def setFunctionParameters(self, index, name, values, min, max): ...
    def addInteractionGroup(self, set1, set2): ...
    def getInteractionGroupParameters(self, index): ...
    def setInteractionGroupParameters(self, index, set1, set2): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...

class AndersenThermostat(Force):
    thisown: Any
    @staticmethod
    def Temperature(): ...
    @staticmethod
    def CollisionFrequency(): ...
    def getDefaultTemperature(self): ...
    def setDefaultTemperature(self, temperature): ...
    def getDefaultCollisionFrequency(self): ...
    def setDefaultCollisionFrequency(self, frequency): ...
    def getRandomNumberSeed(self): ...
    def setRandomNumberSeed(self, seed): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

def AndersenThermostat_Temperature(): ...
def AndersenThermostat_CollisionFrequency(): ...

class NoseHooverIntegrator(Integrator):
    thisown: Any
    __swig_destroy__: Any
    def step(self, steps): ...
    def addThermostat(
        self, temperature, collisionFrequency, chainLength, numMTS, numYoshidaSuzuki
    ): ...
    def addSubsystemThermostat(
        self,
        thermostatedParticles,
        thermostatedPairs,
        temperature,
        collisionFrequency,
        relativeTemperature,
        relativeCollisionFrequency,
        chainLength: int = ...,
        numMTS: int = ...,
        numYoshidaSuzuki: int = ...,
    ): ...
    def getTemperature(self, chainID: int = ...): ...
    def setTemperature(self, temperature, chainID: int = ...): ...
    def getRelativeTemperature(self, chainID: int = ...): ...
    def setRelativeTemperature(self, temperature, chainID: int = ...): ...
    def getCollisionFrequency(self, chainID: int = ...): ...
    def setCollisionFrequency(self, frequency, chainID: int = ...): ...
    def getRelativeCollisionFrequency(self, chainID: int = ...): ...
    def setRelativeCollisionFrequency(self, frequency, chainID: int = ...): ...
    def computeHeatBathEnergy(self): ...
    def getNumThermostats(self): ...
    def getThermostat(self, chainID: int = ...): ...
    def hasSubsystemThermostats(self): ...
    def getMaximumPairDistance(self): ...
    def setMaximumPairDistance(self, distance): ...
    def __init__(self, *args) -> None: ...

class DrudeNoseHooverIntegrator(NoseHooverIntegrator):
    thisown: Any
    __swig_destroy__: Any
    def initialize(self, context): ...
    def getMaxDrudeDistance(self): ...
    def setMaxDrudeDistance(self, distance): ...
    def computeDrudeKineticEnergy(self): ...
    def computeTotalKineticEnergy(self): ...
    def getVelocitiesForTemperature(self, system, temperature, randomSeed): ...
    def __init__(self, *args) -> None: ...

class VirtualSite:
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any
    def getNumParticles(self): ...
    def getParticle(self, particle): ...

class ThreeParticleAverageSite(VirtualSite):
    thisown: Any
    def getWeight(self, particle): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class CustomHbondForce(Force):
    thisown: Any
    NoCutoff: Any
    CutoffNonPeriodic: Any
    CutoffPeriodic: Any
    __swig_destroy__: Any
    def getNumDonors(self): ...
    def getNumAcceptors(self): ...
    def getNumExclusions(self): ...
    def getNumPerDonorParameters(self): ...
    def getNumPerAcceptorParameters(self): ...
    def getNumGlobalParameters(self): ...
    def getNumTabulatedFunctions(self): ...
    def getNumFunctions(self): ...
    def getEnergyFunction(self): ...
    def setEnergyFunction(self, energy): ...
    def getNonbondedMethod(self): ...
    def setNonbondedMethod(self, method): ...
    def getCutoffDistance(self): ...
    def setCutoffDistance(self, distance): ...
    def addPerDonorParameter(self, name): ...
    def getPerDonorParameterName(self, index): ...
    def setPerDonorParameterName(self, index, name): ...
    def addPerAcceptorParameter(self, name): ...
    def getPerAcceptorParameterName(self, index): ...
    def setPerAcceptorParameterName(self, index, name): ...
    def addGlobalParameter(self, name, defaultValue): ...
    def getGlobalParameterName(self, index): ...
    def setGlobalParameterName(self, index, name): ...
    def getGlobalParameterDefaultValue(self, index): ...
    def setGlobalParameterDefaultValue(self, index, defaultValue): ...
    def addDonor(self, *args): ...
    def getDonorParameters(self, index): ...
    def setDonorParameters(self, *args): ...
    def addAcceptor(self, *args): ...
    def getAcceptorParameters(self, index): ...
    def setAcceptorParameters(self, *args): ...
    def addExclusion(self, donor, acceptor): ...
    def getExclusionParticles(self, index): ...
    def setExclusionParticles(self, index, donor, acceptor): ...
    def addTabulatedFunction(self, name, function): ...
    def getTabulatedFunction(self, *args): ...
    def getTabulatedFunctionName(self, index): ...
    def addFunction(self, name, values, min, max): ...
    def getFunctionParameters(self, index): ...
    def setFunctionParameters(self, index, name, values, min, max): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...

class Continuous1DFunction(TabulatedFunction):
    thisown: Any
    def __init__(self, values, min, max, periodic: bool = ...) -> None: ...
    def getFunctionParameters(self): ...
    def setFunctionParameters(self, values, min, max): ...
    def Copy(self): ...
    def __eq__(self, other): ...
    __swig_destroy__: Any

class Discrete3DFunction(TabulatedFunction):
    thisown: Any
    def __init__(self, xsize, ysize, zsize, values) -> None: ...
    def getFunctionParameters(self): ...
    def setFunctionParameters(self, xsize, ysize, zsize, values): ...
    def Copy(self): ...
    def __eq__(self, other): ...
    __swig_destroy__: Any

class MonteCarloFlexibleBarostat(Force):
    thisown: Any
    @staticmethod
    def Pressure(): ...
    @staticmethod
    def Temperature(): ...
    def getDefaultPressure(self): ...
    def setDefaultPressure(self, pressure): ...
    def getFrequency(self): ...
    def setFrequency(self, freq): ...
    def getDefaultTemperature(self): ...
    def setDefaultTemperature(self, temp): ...
    def getRandomNumberSeed(self): ...
    def setRandomNumberSeed(self, seed): ...
    def usesPeriodicBoundaryConditions(self): ...
    def getScaleMoleculesAsRigid(self): ...
    def setScaleMoleculesAsRigid(self, rigid): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

def MonteCarloFlexibleBarostat_Pressure(): ...
def MonteCarloFlexibleBarostat_Temperature(): ...

class MonteCarloBarostat(Force):
    thisown: Any
    @staticmethod
    def Pressure(): ...
    @staticmethod
    def Temperature(): ...
    def getDefaultPressure(self): ...
    def setDefaultPressure(self, pressure): ...
    def getFrequency(self): ...
    def setFrequency(self, freq): ...
    def getDefaultTemperature(self): ...
    def setDefaultTemperature(self, temp): ...
    def getRandomNumberSeed(self): ...
    def setRandomNumberSeed(self, seed): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

def MonteCarloBarostat_Pressure(): ...
def MonteCarloBarostat_Temperature(): ...

class AmoebaWcaDispersionForce(Force):
    thisown: Any
    def getNumParticles(self): ...
    def setParticleParameters(self, particleIndex, radius, epsilon): ...
    def getParticleParameters(self, particleIndex): ...
    def addParticle(self, radius, epsilon): ...
    def updateParametersInContext(self, context): ...
    def getEpso(self): ...
    def getEpsh(self): ...
    def getRmino(self): ...
    def getRminh(self): ...
    def getAwater(self): ...
    def getShctd(self): ...
    def getDispoff(self): ...
    def getSlevy(self): ...
    def setEpso(self, inputValue): ...
    def setEpsh(self, inputValue): ...
    def setRmino(self, inputValue): ...
    def setRminh(self, inputValue): ...
    def setAwater(self, inputValue): ...
    def setShctd(self, inputValue): ...
    def setDispoff(self, inputValue): ...
    def setSlevy(self, inputValue): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class GayBerneForce(Force):
    thisown: Any
    NoCutoff: Any
    CutoffNonPeriodic: Any
    CutoffPeriodic: Any
    def getNumParticles(self): ...
    def getNumExceptions(self): ...
    def getNonbondedMethod(self): ...
    def setNonbondedMethod(self, method): ...
    def getCutoffDistance(self): ...
    def setCutoffDistance(self, distance): ...
    def getUseSwitchingFunction(self): ...
    def setUseSwitchingFunction(self, use): ...
    def getSwitchingDistance(self): ...
    def setSwitchingDistance(self, distance): ...
    def addParticle(
        self, sigma, epsilon, xparticle, yparticle, sx, sy, sz, ex, ey, ez
    ): ...
    def getParticleParameters(self, index): ...
    def setParticleParameters(
        self, index, sigma, epsilon, xparticle, yparticle, sx, sy, sz, ex, ey, ez
    ): ...
    def addException(
        self, particle1, particle2, sigma, epsilon, replace: bool = ...
    ): ...
    def getExceptionParameters(self, index): ...
    def setExceptionParameters(self, index, particle1, particle2, sigma, epsilon): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class TwoParticleAverageSite(VirtualSite):
    thisown: Any
    def getWeight(self, particle): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class LocalCoordinatesSite(VirtualSite):
    thisown: Any
    def getOriginWeights(self): ...
    def getXWeights(self): ...
    def getYWeights(self): ...
    def getLocalPosition(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class CustomBondForce(Force):
    thisown: Any
    def getNumBonds(self): ...
    def getNumPerBondParameters(self): ...
    def getNumGlobalParameters(self): ...
    def getNumEnergyParameterDerivatives(self): ...
    def getEnergyFunction(self): ...
    def setEnergyFunction(self, energy): ...
    def addPerBondParameter(self, name): ...
    def getPerBondParameterName(self, index): ...
    def setPerBondParameterName(self, index, name): ...
    def addGlobalParameter(self, name, defaultValue): ...
    def getGlobalParameterName(self, index): ...
    def setGlobalParameterName(self, index, name): ...
    def getGlobalParameterDefaultValue(self, index): ...
    def setGlobalParameterDefaultValue(self, index, defaultValue): ...
    def addEnergyParameterDerivative(self, name): ...
    def getEnergyParameterDerivativeName(self, index): ...
    def addBond(self, *args): ...
    def getBondParameters(self, index): ...
    def setBondParameters(self, *args): ...
    def updateParametersInContext(self, context): ...
    def setUsesPeriodicBoundaryConditions(self, periodic): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class State:
    thisown: Any
    Positions: Any
    Velocities: Any
    Forces: Any
    Energy: Any
    Parameters: Any
    ParameterDerivatives: Any
    IntegratorParameters: Any
    def getTime(self): ...
    def getStepCount(self): ...
    def getKineticEnergy(self): ...
    def getPotentialEnergy(self): ...
    def getPeriodicBoxVolume(self): ...
    def getParameters(self): ...
    def getEnergyParameterDerivatives(self): ...
    def getDataTypes(self): ...
    def __deepcopy__(self, memo): ...
    def getPeriodicBoxVectors(self, asNumpy: bool = ...): ...
    def getPositions(self, asNumpy: bool = ...): ...
    def getVelocities(self, asNumpy: bool = ...): ...
    def getForces(self, asNumpy: bool = ...): ...
    def __copy__(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class HarmonicAngleForce(Force):
    thisown: Any
    def getNumAngles(self): ...
    def addAngle(self, particle1, particle2, particle3, angle, k): ...
    def getAngleParameters(self, index): ...
    def setAngleParameters(self, index, particle1, particle2, particle3, angle, k): ...
    def updateParametersInContext(self, context): ...
    def setUsesPeriodicBoundaryConditions(self, periodic): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class CustomManyParticleForce(Force):
    thisown: Any
    NoCutoff: Any
    CutoffNonPeriodic: Any
    CutoffPeriodic: Any
    SinglePermutation: Any
    UniqueCentralParticle: Any
    __swig_destroy__: Any
    def getNumParticlesPerSet(self): ...
    def getNumParticles(self): ...
    def getNumExclusions(self): ...
    def getNumPerParticleParameters(self): ...
    def getNumGlobalParameters(self): ...
    def getNumTabulatedFunctions(self): ...
    def getEnergyFunction(self): ...
    def setEnergyFunction(self, energy): ...
    def getNonbondedMethod(self): ...
    def setNonbondedMethod(self, method): ...
    def getPermutationMode(self): ...
    def setPermutationMode(self, mode): ...
    def getCutoffDistance(self): ...
    def setCutoffDistance(self, distance): ...
    def addPerParticleParameter(self, name): ...
    def getPerParticleParameterName(self, index): ...
    def setPerParticleParameterName(self, index, name): ...
    def addGlobalParameter(self, name, defaultValue): ...
    def getGlobalParameterName(self, index): ...
    def setGlobalParameterName(self, index, name): ...
    def getGlobalParameterDefaultValue(self, index): ...
    def setGlobalParameterDefaultValue(self, index, defaultValue): ...
    def addParticle(self, *args): ...
    def getParticleParameters(self, index): ...
    def setParticleParameters(self, index, parameters, type): ...
    def addExclusion(self, particle1, particle2): ...
    def getExclusionParticles(self, index): ...
    def setExclusionParticles(self, index, particle1, particle2): ...
    def createExclusionsFromBonds(self, bonds, bondCutoff): ...
    def getTypeFilter(self, index): ...
    def setTypeFilter(self, index, types): ...
    def addTabulatedFunction(self, name, function): ...
    def getTabulatedFunction(self, *args): ...
    def getTabulatedFunctionName(self, index): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...

class VariableVerletIntegrator(Integrator):
    thisown: Any
    def getErrorTolerance(self): ...
    def setErrorTolerance(self, tol): ...
    def getMaximumStepSize(self): ...
    def setMaximumStepSize(self, size): ...
    def step(self, steps): ...
    def stepTo(self, time): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class MonteCarloMembraneBarostat(Force):
    thisown: Any
    XYIsotropic: Any
    XYAnisotropic: Any
    ZFree: Any
    ZFixed: Any
    ConstantVolume: Any
    @staticmethod
    def Pressure(): ...
    @staticmethod
    def SurfaceTension(): ...
    @staticmethod
    def Temperature(): ...
    def getDefaultPressure(self): ...
    def setDefaultPressure(self, pressure): ...
    def getDefaultSurfaceTension(self): ...
    def setDefaultSurfaceTension(self, surfaceTension): ...
    def getFrequency(self): ...
    def setFrequency(self, freq): ...
    def getDefaultTemperature(self): ...
    def setDefaultTemperature(self, temp): ...
    def getXYMode(self): ...
    def setXYMode(self, mode): ...
    def getZMode(self): ...
    def setZMode(self, mode): ...
    def getRandomNumberSeed(self): ...
    def setRandomNumberSeed(self, seed): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

def MonteCarloMembraneBarostat_Pressure(): ...
def MonteCarloMembraneBarostat_SurfaceTension(): ...
def MonteCarloMembraneBarostat_Temperature(): ...

class MonteCarloAnisotropicBarostat(Force):
    thisown: Any
    @staticmethod
    def PressureX(): ...
    @staticmethod
    def PressureY(): ...
    @staticmethod
    def PressureZ(): ...
    @staticmethod
    def Temperature(): ...
    def getDefaultPressure(self): ...
    def setDefaultPressure(self, pressure): ...
    def getScaleX(self): ...
    def getScaleY(self): ...
    def getScaleZ(self): ...
    def getFrequency(self): ...
    def setFrequency(self, freq): ...
    def getDefaultTemperature(self): ...
    def setDefaultTemperature(self, temp): ...
    def getRandomNumberSeed(self): ...
    def setRandomNumberSeed(self, seed): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

def MonteCarloAnisotropicBarostat_PressureX(): ...
def MonteCarloAnisotropicBarostat_PressureY(): ...
def MonteCarloAnisotropicBarostat_PressureZ(): ...
def MonteCarloAnisotropicBarostat_Temperature(): ...

class CustomCVForce(Force):
    thisown: Any
    __swig_destroy__: Any
    def getNumCollectiveVariables(self): ...
    def getNumGlobalParameters(self): ...
    def getNumEnergyParameterDerivatives(self): ...
    def getNumTabulatedFunctions(self): ...
    def getEnergyFunction(self): ...
    def setEnergyFunction(self, energy): ...
    def addCollectiveVariable(self, name, variable): ...
    def getCollectiveVariableName(self, index): ...
    def getCollectiveVariable(self, *args): ...
    def addGlobalParameter(self, name, defaultValue): ...
    def getGlobalParameterName(self, index): ...
    def setGlobalParameterName(self, index, name): ...
    def getGlobalParameterDefaultValue(self, index): ...
    def setGlobalParameterDefaultValue(self, index, defaultValue): ...
    def addEnergyParameterDerivative(self, name): ...
    def getEnergyParameterDerivativeName(self, index): ...
    def addTabulatedFunction(self, name, function): ...
    def getTabulatedFunction(self, *args): ...
    def getTabulatedFunctionName(self, index): ...
    def getCollectiveVariableValues(self, context): ...
    def getInnerContext(self, context): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...

class NonbondedForce(Force):
    thisown: Any
    NoCutoff: Any
    CutoffNonPeriodic: Any
    CutoffPeriodic: Any
    Ewald: Any
    PME: Any
    LJPME: Any
    def getNumParticles(self): ...
    def getNumExceptions(self): ...
    def getNumGlobalParameters(self): ...
    def getNumParticleParameterOffsets(self): ...
    def getNumExceptionParameterOffsets(self): ...
    def getNonbondedMethod(self): ...
    def setNonbondedMethod(self, method): ...
    def getCutoffDistance(self): ...
    def setCutoffDistance(self, distance): ...
    def getUseSwitchingFunction(self): ...
    def setUseSwitchingFunction(self, use): ...
    def getSwitchingDistance(self): ...
    def setSwitchingDistance(self, distance): ...
    def getReactionFieldDielectric(self): ...
    def setReactionFieldDielectric(self, dielectric): ...
    def getEwaldErrorTolerance(self): ...
    def setEwaldErrorTolerance(self, tol): ...
    def getPMEParameters(self): ...
    def getLJPMEParameters(self): ...
    def setPMEParameters(self, alpha, nx, ny, nz): ...
    def setLJPMEParameters(self, alpha, nx, ny, nz): ...
    def getPMEParametersInContext(self, context): ...
    def getLJPMEParametersInContext(self, context): ...
    def addParticle(self, charge, sigma, epsilon): ...
    def getParticleParameters(self, index): ...
    def setParticleParameters(self, index, charge, sigma, epsilon): ...
    def addException(
        self, particle1, particle2, chargeProd, sigma, epsilon, replace: bool = ...
    ): ...
    def getExceptionParameters(self, index): ...
    def setExceptionParameters(
        self, index, particle1, particle2, chargeProd, sigma, epsilon
    ): ...
    def createExceptionsFromBonds(self, bonds, coulomb14Scale, lj14Scale): ...
    def addGlobalParameter(self, name, defaultValue): ...
    def getGlobalParameterName(self, index): ...
    def setGlobalParameterName(self, index, name): ...
    def getGlobalParameterDefaultValue(self, index): ...
    def setGlobalParameterDefaultValue(self, index, defaultValue): ...
    def addParticleParameterOffset(
        self, parameter, particleIndex, chargeScale, sigmaScale, epsilonScale
    ): ...
    def getParticleParameterOffset(self, index): ...
    def setParticleParameterOffset(
        self, index, parameter, particleIndex, chargeScale, sigmaScale, epsilonScale
    ): ...
    def addExceptionParameterOffset(
        self, parameter, exceptionIndex, chargeProdScale, sigmaScale, epsilonScale
    ): ...
    def getExceptionParameterOffset(self, index): ...
    def setExceptionParameterOffset(
        self,
        index,
        parameter,
        exceptionIndex,
        chargeProdScale,
        sigmaScale,
        epsilonScale,
    ): ...
    def getUseDispersionCorrection(self): ...
    def setUseDispersionCorrection(self, useCorrection): ...
    def getReciprocalSpaceForceGroup(self): ...
    def setReciprocalSpaceForceGroup(self, group): ...
    def getIncludeDirectSpace(self): ...
    def setIncludeDirectSpace(self, include): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def getExceptionsUsePeriodicBoundaryConditions(self): ...
    def setExceptionsUsePeriodicBoundaryConditions(self, periodic): ...
    def addParticle_usingRVdw(self, charge, rVDW, epsilon): ...
    def addException_usingRMin(
        self, particle1, particle2, chargeProd, rMin, epsilon
    ): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class PeriodicTorsionForce(Force):
    thisown: Any
    def getNumTorsions(self): ...
    def addTorsion(
        self, particle1, particle2, particle3, particle4, periodicity, phase, k
    ): ...
    def getTorsionParameters(self, index): ...
    def setTorsionParameters(
        self, index, particle1, particle2, particle3, particle4, periodicity, phase, k
    ): ...
    def updateParametersInContext(self, context): ...
    def setUsesPeriodicBoundaryConditions(self, periodic): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class BrownianIntegrator(Integrator):
    thisown: Any
    def getTemperature(self): ...
    def setTemperature(self, temp): ...
    def getFriction(self): ...
    def setFriction(self, coeff): ...
    def getRandomNumberSeed(self): ...
    def setRandomNumberSeed(self, seed): ...
    def step(self, steps): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class XmlSerializer:
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def serializeSystem(object): ...
    @staticmethod
    def deserializeSystem(inputString): ...
    @staticmethod
    def serialize(object): ...
    @staticmethod
    def deserialize(inputString): ...
    @staticmethod
    def clone(object): ...
    __swig_destroy__: Any

def XmlSerializer_serializeSystem(object): ...
def XmlSerializer_deserializeSystem(inputString): ...
def XmlSerializer__cloneSystem(object): ...
def XmlSerializer__serializeForce(object): ...
def XmlSerializer__deserializeForce(inputString): ...
def XmlSerializer__cloneForce(object): ...
def XmlSerializer__serializeIntegrator(object): ...
def XmlSerializer__deserializeIntegrator(inputString): ...
def XmlSerializer__cloneIntegrator(object): ...
def XmlSerializer__serializeTabulatedFunction(object): ...
def XmlSerializer__deserializeTabulatedFunction(inputString): ...
def XmlSerializer__cloneTabulatedFunction(object): ...
def XmlSerializer__serializeState(object): ...
def XmlSerializer__deserializeState(inputString): ...
def XmlSerializer__cloneState(object): ...

class GBSAOBCForce(Force):
    thisown: Any
    NoCutoff: Any
    CutoffNonPeriodic: Any
    CutoffPeriodic: Any
    def getNumParticles(self): ...
    def addParticle(self, charge, radius, scalingFactor): ...
    def getParticleParameters(self, index): ...
    def setParticleParameters(self, index, charge, radius, scalingFactor): ...
    def getSolventDielectric(self): ...
    def setSolventDielectric(self, dielectric): ...
    def getSoluteDielectric(self): ...
    def setSoluteDielectric(self, dielectric): ...
    def getSurfaceAreaEnergy(self): ...
    def setSurfaceAreaEnergy(self, energy): ...
    def getNonbondedMethod(self): ...
    def setNonbondedMethod(self, method): ...
    def getCutoffDistance(self): ...
    def setCutoffDistance(self, distance): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class VerletIntegrator(Integrator):
    thisown: Any
    def step(self, steps): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class HippoNonbondedForce(Force):
    thisown: Any
    NoCutoff: Any
    PME: Any
    ZThenX: Any
    Bisector: Any
    ZBisect: Any
    ThreeFold: Any
    ZOnly: Any
    NoAxisType: Any
    def getNumParticles(self): ...
    def getNumExceptions(self): ...
    def getNonbondedMethod(self): ...
    def setNonbondedMethod(self, method): ...
    def getCutoffDistance(self): ...
    def setCutoffDistance(self, distance): ...
    def getSwitchingDistance(self): ...
    def setSwitchingDistance(self, distance): ...
    def getExtrapolationCoefficients(self): ...
    def setExtrapolationCoefficients(self, coefficients): ...
    def getPMEParameters(self): ...
    def getDPMEParameters(self): ...
    def setPMEParameters(self, alpha, nx, ny, nz): ...
    def setDPMEParameters(self, alpha, nx, ny, nz): ...
    def getPMEParametersInContext(self, context): ...
    def getDPMEParametersInContext(self, context): ...
    def addParticle(
        self,
        charge,
        dipole,
        quadrupole,
        coreCharge,
        alpha,
        epsilon,
        damping,
        c6,
        pauliK,
        pauliQ,
        pauliAlpha,
        polarizability,
        axisType,
        multipoleAtomZ,
        multipoleAtomX,
        multipoleAtomY,
    ): ...
    def getParticleParameters(self, index): ...
    def setParticleParameters(
        self,
        index,
        charge,
        dipole,
        quadrupole,
        coreCharge,
        alpha,
        epsilon,
        damping,
        c6,
        pauliK,
        pauliQ,
        pauliAlpha,
        polarizability,
        axisType,
        multipoleAtomZ,
        multipoleAtomX,
        multipoleAtomY,
    ): ...
    def addException(
        self,
        particle1,
        particle2,
        multipoleMultipoleScale,
        dipoleMultipoleScale,
        dipoleDipoleScale,
        dispersionScale,
        repulsionScale,
        chargeTransferScale,
        replace: bool = ...,
    ): ...
    def getExceptionParameters(self, index): ...
    def setExceptionParameters(
        self,
        index,
        particle1,
        particle2,
        multipoleMultipoleScale,
        dipoleMultipoleScale,
        dipoleDipoleScale,
        dispersionScale,
        repulsionScale,
        chargeTransferScale,
    ): ...
    def getEwaldErrorTolerance(self): ...
    def setEwaldErrorTolerance(self, tol): ...
    def getLabFramePermanentDipoles(self, context): ...
    def getInducedDipoles(self, context): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class RPMDMonteCarloBarostat(Force):
    thisown: Any
    @staticmethod
    def Pressure(): ...
    def getDefaultPressure(self): ...
    def setDefaultPressure(self, pressure): ...
    def getFrequency(self): ...
    def setFrequency(self, freq): ...
    def getRandomNumberSeed(self): ...
    def setRandomNumberSeed(self, seed): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

def RPMDMonteCarloBarostat_Pressure(): ...

class NoseHooverChain:
    thisown: Any
    def getTemperature(self): ...
    def setTemperature(self, temperature): ...
    def getRelativeTemperature(self): ...
    def setRelativeTemperature(self, temperature): ...
    def getCollisionFrequency(self): ...
    def setCollisionFrequency(self, frequency): ...
    def getRelativeCollisionFrequency(self): ...
    def setRelativeCollisionFrequency(self, frequency): ...
    def getNumDegreesOfFreedom(self): ...
    def setNumDegreesOfFreedom(self, numDOF): ...
    def getChainLength(self): ...
    def getNumMultiTimeSteps(self): ...
    def getNumYoshidaSuzukiTimeSteps(self): ...
    def getChainID(self): ...
    def getThermostatedAtoms(self): ...
    def setThermostatedAtoms(self, atomIDs): ...
    def getThermostatedPairs(self): ...
    def setThermostatedPairs(self, pairIDs): ...
    def getYoshidaSuzukiWeights(self): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class LangevinMiddleIntegrator(Integrator):
    thisown: Any
    def getTemperature(self): ...
    def setTemperature(self, temp): ...
    def getFriction(self): ...
    def setFriction(self, coeff): ...
    def getRandomNumberSeed(self): ...
    def setRandomNumberSeed(self, seed): ...
    def step(self, steps): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class RPMDIntegrator(Integrator):
    thisown: Any
    def getNumCopies(self): ...
    def getTemperature(self): ...
    def setTemperature(self, temp): ...
    def getFriction(self): ...
    def setFriction(self, coeff): ...
    def getApplyThermostat(self): ...
    def setApplyThermostat(self, apply): ...
    def getRandomNumberSeed(self): ...
    def setRandomNumberSeed(self, seed): ...
    def getContractions(self): ...
    def setPositions(self, copy, positions): ...
    def setVelocities(self, copy, velocities): ...
    def getTotalEnergy(self): ...
    def step(self, steps): ...
    def getState(
        self,
        copy,
        getPositions: bool = ...,
        getVelocities: bool = ...,
        getForces: bool = ...,
        getEnergy: bool = ...,
        getParameters: bool = ...,
        getParameterDerivatives: bool = ...,
        enforcePeriodicBox: bool = ...,
        groups: int = ...,
    ): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class AmoebaGeneralizedKirkwoodForce(Force):
    thisown: Any
    def getNumParticles(self): ...
    def addParticle(self, charge, radius, scalingFactor): ...
    def getParticleParameters(self, index): ...
    def setParticleParameters(self, index, charge, radius, scalingFactor): ...
    def getSolventDielectric(self): ...
    def setSolventDielectric(self, dielectric): ...
    def getSoluteDielectric(self): ...
    def setSoluteDielectric(self, dielectric): ...
    def getIncludeCavityTerm(self): ...
    def setIncludeCavityTerm(self, includeCavityTerm): ...
    def getProbeRadius(self): ...
    def setProbeRadius(self, probeRadius): ...
    def getSurfaceAreaFactor(self): ...
    def setSurfaceAreaFactor(self, surfaceAreaFactor): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class DrudeSCFIntegrator(DrudeIntegrator):
    thisown: Any
    def getMinimizationErrorTolerance(self): ...
    def setMinimizationErrorTolerance(self, tol): ...
    def step(self, steps): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class LocalEnergyMinimizer:
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    @staticmethod
    def minimize(context, tolerance: int = ..., maxIterations: int = ...): ...
    __swig_destroy__: Any

def LocalEnergyMinimizer_minimize(
    context, tolerance: int = ..., maxIterations: int = ...
): ...

class LangevinIntegrator(Integrator):
    thisown: Any
    def getTemperature(self): ...
    def setTemperature(self, temp): ...
    def getFriction(self): ...
    def setFriction(self, coeff): ...
    def getRandomNumberSeed(self): ...
    def setRandomNumberSeed(self, seed): ...
    def step(self, steps): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class VariableLangevinIntegrator(Integrator):
    thisown: Any
    def getTemperature(self): ...
    def setTemperature(self, temp): ...
    def getFriction(self): ...
    def setFriction(self, coeff): ...
    def getErrorTolerance(self): ...
    def setErrorTolerance(self, tol): ...
    def getMaximumStepSize(self): ...
    def setMaximumStepSize(self, size): ...
    def getRandomNumberSeed(self): ...
    def setRandomNumberSeed(self, seed): ...
    def step(self, steps): ...
    def stepTo(self, time): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class CustomIntegrator(Integrator):
    thisown: Any
    ComputeGlobal: Any
    ComputePerDof: Any
    ComputeSum: Any
    ConstrainPositions: Any
    ConstrainVelocities: Any
    UpdateContextState: Any
    IfBlockStart: Any
    WhileBlockStart: Any
    BlockEnd: Any
    __swig_destroy__: Any
    def getNumGlobalVariables(self): ...
    def getNumPerDofVariables(self): ...
    def getNumComputations(self): ...
    def getNumTabulatedFunctions(self): ...
    def addGlobalVariable(self, name, initialValue): ...
    def getGlobalVariableName(self, index): ...
    def addPerDofVariable(self, name, initialValue): ...
    def getPerDofVariableName(self, index): ...
    def getGlobalVariable(self, index): ...
    def getGlobalVariableByName(self, name): ...
    def setGlobalVariable(self, index, value): ...
    def setGlobalVariableByName(self, name, value): ...
    def getPerDofVariableByName(self, name): ...
    def setPerDofVariable(self, index, values): ...
    def setPerDofVariableByName(self, name, values): ...
    def addComputeGlobal(self, variable, expression): ...
    def addComputePerDof(self, variable, expression): ...
    def addComputeSum(self, variable, expression): ...
    def addConstrainPositions(self): ...
    def addConstrainVelocities(self): ...
    def addUpdateContextState(self): ...
    def beginIfBlock(self, condition): ...
    def beginWhileBlock(self, condition): ...
    def endBlock(self): ...
    def getComputationStep(self, index): ...
    def addTabulatedFunction(self, name, function): ...
    def getTabulatedFunction(self, *args): ...
    def getTabulatedFunctionName(self, index): ...
    def getKineticEnergyExpression(self): ...
    def setKineticEnergyExpression(self, expression): ...
    def getRandomNumberSeed(self): ...
    def setRandomNumberSeed(self, seed): ...
    def step(self, steps): ...
    def getPerDofVariable(self, *args): ...
    def __init__(self, *args) -> None: ...

class RBTorsionForce(Force):
    thisown: Any
    def getNumTorsions(self): ...
    def addTorsion(
        self, particle1, particle2, particle3, particle4, c0, c1, c2, c3, c4, c5
    ): ...
    def getTorsionParameters(self, index): ...
    def setTorsionParameters(
        self, index, particle1, particle2, particle3, particle4, c0, c1, c2, c3, c4, c5
    ): ...
    def updateParametersInContext(self, context): ...
    def setUsesPeriodicBoundaryConditions(self, periodic): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class CompoundIntegrator(Integrator):
    thisown: Any
    __swig_destroy__: Any
    def getNumIntegrators(self): ...
    def addIntegrator(self, integrator): ...
    def getIntegrator(self, *args): ...
    def getCurrentIntegrator(self): ...
    def setCurrentIntegrator(self, index): ...
    def getStepSize(self): ...
    def setStepSize(self, size): ...
    def getConstraintTolerance(self): ...
    def setConstraintTolerance(self, tol): ...
    def step(self, steps): ...
    def __init__(self, *args) -> None: ...

class System:
    thisown: Any
    __swig_destroy__: Any
    def getNumParticles(self): ...
    def addParticle(self, mass): ...
    def getParticleMass(self, index): ...
    def setParticleMass(self, index, mass): ...
    def setVirtualSite(self, index, virtualSite): ...
    def isVirtualSite(self, index): ...
    def getVirtualSite(self, index): ...
    def getNumConstraints(self): ...
    def addConstraint(self, particle1, particle2, distance): ...
    def getConstraintParameters(self, index): ...
    def setConstraintParameters(self, index, particle1, particle2, distance): ...
    def removeConstraint(self, index): ...
    def addForce(self, force): ...
    def getNumForces(self): ...
    def getForce(self, *args): ...
    def removeForce(self, index): ...
    def getDefaultPeriodicBoxVectors(self): ...
    def setDefaultPeriodicBoxVectors(self, a, b, c): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __deepcopy__(self, memo): ...
    def getForces(self): ...
    def __copy__(self): ...
    def __init__(self, *args) -> None: ...

class CustomCompoundBondForce(Force):
    thisown: Any
    __swig_destroy__: Any
    def getNumParticlesPerBond(self): ...
    def getNumBonds(self): ...
    def getNumPerBondParameters(self): ...
    def getNumGlobalParameters(self): ...
    def getNumEnergyParameterDerivatives(self): ...
    def getNumTabulatedFunctions(self): ...
    def getNumFunctions(self): ...
    def getEnergyFunction(self): ...
    def setEnergyFunction(self, energy): ...
    def addPerBondParameter(self, name): ...
    def getPerBondParameterName(self, index): ...
    def setPerBondParameterName(self, index, name): ...
    def addGlobalParameter(self, name, defaultValue): ...
    def getGlobalParameterName(self, index): ...
    def setGlobalParameterName(self, index, name): ...
    def getGlobalParameterDefaultValue(self, index): ...
    def setGlobalParameterDefaultValue(self, index, defaultValue): ...
    def addEnergyParameterDerivative(self, name): ...
    def getEnergyParameterDerivativeName(self, index): ...
    def addBond(self, *args): ...
    def getBondParameters(self, index): ...
    def setBondParameters(self, *args): ...
    def addTabulatedFunction(self, name, function): ...
    def getTabulatedFunction(self, *args): ...
    def getTabulatedFunctionName(self, index): ...
    def addFunction(self, name, values, min, max): ...
    def getFunctionParameters(self, index): ...
    def setFunctionParameters(self, index, name, values, min, max): ...
    def updateParametersInContext(self, context): ...
    def setUsesPeriodicBoundaryConditions(self, periodic): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...

class CustomCentroidBondForce(Force):
    thisown: Any
    __swig_destroy__: Any
    def getNumGroupsPerBond(self): ...
    def getNumGroups(self): ...
    def getNumBonds(self): ...
    def getNumPerBondParameters(self): ...
    def getNumGlobalParameters(self): ...
    def getNumEnergyParameterDerivatives(self): ...
    def getNumTabulatedFunctions(self): ...
    def getNumFunctions(self): ...
    def getEnergyFunction(self): ...
    def setEnergyFunction(self, energy): ...
    def addPerBondParameter(self, name): ...
    def getPerBondParameterName(self, index): ...
    def setPerBondParameterName(self, index, name): ...
    def addGlobalParameter(self, name, defaultValue): ...
    def getGlobalParameterName(self, index): ...
    def setGlobalParameterName(self, index, name): ...
    def getGlobalParameterDefaultValue(self, index): ...
    def setGlobalParameterDefaultValue(self, index, defaultValue): ...
    def addEnergyParameterDerivative(self, name): ...
    def getEnergyParameterDerivativeName(self, index): ...
    def addGroup(self, *args): ...
    def getGroupParameters(self, index): ...
    def setGroupParameters(self, *args): ...
    def addBond(self, *args): ...
    def getBondParameters(self, index): ...
    def setBondParameters(self, *args): ...
    def addTabulatedFunction(self, name, function): ...
    def getTabulatedFunction(self, *args): ...
    def getTabulatedFunctionName(self, index): ...
    def updateParametersInContext(self, context): ...
    def setUsesPeriodicBoundaryConditions(self, periodic): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...

class SerializationNode:
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def getName(self): ...
    def setName(self, name): ...
    def getChildren(self, *args): ...
    def getChildNode(self, *args): ...
    def getProperties(self): ...
    def hasProperty(self, name): ...
    def getStringProperty(self, *args): ...
    def setStringProperty(self, name, value): ...
    def getIntProperty(self, *args): ...
    def setIntProperty(self, name, value): ...
    def getLongProperty(self, *args): ...
    def setLongProperty(self, name, value): ...
    def getBoolProperty(self, *args): ...
    def setBoolProperty(self, name, value): ...
    def getDoubleProperty(self, *args): ...
    def setDoubleProperty(self, name, value): ...
    def createChildNode(self, name): ...
    __swig_destroy__: Any

class CMAPTorsionForce(Force):
    thisown: Any
    def getNumMaps(self): ...
    def getNumTorsions(self): ...
    def addMap(self, size, energy): ...
    def getMapParameters(self, index): ...
    def setMapParameters(self, index, size, energy): ...
    def addTorsion(self, map, a1, a2, a3, a4, b1, b2, b3, b4): ...
    def getTorsionParameters(self, index): ...
    def setTorsionParameters(self, index, map, a1, a2, a3, a4, b1, b2, b3, b4): ...
    def updateParametersInContext(self, context): ...
    def setUsesPeriodicBoundaryConditions(self, periodic): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class AmoebaMultipoleForce(Force):
    thisown: Any
    NoCutoff: Any
    PME: Any
    Mutual: Any
    Direct: Any
    Extrapolated: Any
    ZThenX: Any
    Bisector: Any
    ZBisect: Any
    ThreeFold: Any
    ZOnly: Any
    NoAxisType: Any
    LastAxisTypeIndex: Any
    Covalent12: Any
    Covalent13: Any
    Covalent14: Any
    Covalent15: Any
    PolarizationCovalent11: Any
    PolarizationCovalent12: Any
    PolarizationCovalent13: Any
    PolarizationCovalent14: Any
    CovalentEnd: Any
    def getNumMultipoles(self): ...
    def getNonbondedMethod(self): ...
    def setNonbondedMethod(self, method): ...
    def getPolarizationType(self): ...
    def setPolarizationType(self, type): ...
    def getCutoffDistance(self): ...
    def setCutoffDistance(self, distance): ...
    def getPMEParameters(self): ...
    def setPMEParameters(self, alpha, nx, ny, nz): ...
    def getAEwald(self): ...
    def setAEwald(self, aewald): ...
    def getPmeBSplineOrder(self): ...
    def getPmeGridDimensions(self): ...
    def setPmeGridDimensions(self, gridDimension): ...
    def getPMEParametersInContext(self, context): ...
    def addMultipole(
        self,
        charge,
        molecularDipole,
        molecularQuadrupole,
        axisType,
        multipoleAtomZ,
        multipoleAtomX,
        multipoleAtomY,
        thole,
        dampingFactor,
        polarity,
    ): ...
    def getMultipoleParameters(self, index): ...
    def setMultipoleParameters(
        self,
        index,
        charge,
        molecularDipole,
        molecularQuadrupole,
        axisType,
        multipoleAtomZ,
        multipoleAtomX,
        multipoleAtomY,
        thole,
        dampingFactor,
        polarity,
    ): ...
    def setCovalentMap(self, index, typeId, covalentAtoms): ...
    def getCovalentMap(self, index, typeId): ...
    def getCovalentMaps(self, index): ...
    def getMutualInducedMaxIterations(self): ...
    def setMutualInducedMaxIterations(self, inputMutualInducedMaxIterations): ...
    def getMutualInducedTargetEpsilon(self): ...
    def setMutualInducedTargetEpsilon(self, inputMutualInducedTargetEpsilon): ...
    def setExtrapolationCoefficients(self, coefficients): ...
    def getExtrapolationCoefficients(self): ...
    def getEwaldErrorTolerance(self): ...
    def setEwaldErrorTolerance(self, tol): ...
    def getLabFramePermanentDipoles(self, context): ...
    def getInducedDipoles(self, context): ...
    def getTotalDipoles(self, context): ...
    def getElectrostaticPotential(self, inputGrid, context): ...
    def getSystemMultipoleMoments(self, context): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class Continuous3DFunction(TabulatedFunction):
    thisown: Any
    def __init__(
        self,
        xsize,
        ysize,
        zsize,
        values,
        xmin,
        xmax,
        ymin,
        ymax,
        zmin,
        zmax,
        periodic: bool = ...,
    ) -> None: ...
    def getFunctionParameters(self): ...
    def setFunctionParameters(
        self, xsize, ysize, zsize, values, xmin, xmax, ymin, ymax, zmin, zmax
    ): ...
    def Copy(self): ...
    def __eq__(self, other): ...
    __swig_destroy__: Any

class OutOfPlaneSite(VirtualSite):
    thisown: Any
    def getWeight12(self): ...
    def getWeight13(self): ...
    def getWeightCross(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class Discrete1DFunction(TabulatedFunction):
    thisown: Any
    def __init__(self, values) -> None: ...
    def getFunctionParameters(self): ...
    def setFunctionParameters(self, values): ...
    def Copy(self): ...
    def __eq__(self, other): ...
    __swig_destroy__: Any

class AmoebaTorsionTorsionForce(Force):
    thisown: Any
    def getNumTorsionTorsions(self): ...
    def getNumTorsionTorsionGrids(self): ...
    def addTorsionTorsion(
        self,
        particle1,
        particle2,
        particle3,
        particle4,
        particle5,
        chiralCheckAtomIndex,
        gridIndex,
    ): ...
    def getTorsionTorsionParameters(self, index): ...
    def setTorsionTorsionParameters(
        self,
        index,
        particle1,
        particle2,
        particle3,
        particle4,
        particle5,
        chiralCheckAtomIndex,
        gridIndex,
    ): ...
    def getTorsionTorsionGrid(self, index): ...
    def setTorsionTorsionGrid(self, index, grid): ...
    def setUsesPeriodicBoundaryConditions(self, periodic): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class CustomTorsionForce(Force):
    thisown: Any
    def getNumTorsions(self): ...
    def getNumPerTorsionParameters(self): ...
    def getNumGlobalParameters(self): ...
    def getNumEnergyParameterDerivatives(self): ...
    def getEnergyFunction(self): ...
    def setEnergyFunction(self, energy): ...
    def addPerTorsionParameter(self, name): ...
    def getPerTorsionParameterName(self, index): ...
    def setPerTorsionParameterName(self, index, name): ...
    def addGlobalParameter(self, name, defaultValue): ...
    def getGlobalParameterName(self, index): ...
    def setGlobalParameterName(self, index, name): ...
    def getGlobalParameterDefaultValue(self, index): ...
    def setGlobalParameterDefaultValue(self, index, defaultValue): ...
    def addEnergyParameterDerivative(self, name): ...
    def getEnergyParameterDerivativeName(self, index): ...
    def addTorsion(self, *args): ...
    def getTorsionParameters(self, index): ...
    def setTorsionParameters(self, *args): ...
    def updateParametersInContext(self, context): ...
    def setUsesPeriodicBoundaryConditions(self, periodic): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class HarmonicBondForce(Force):
    thisown: Any
    def getNumBonds(self): ...
    def addBond(self, particle1, particle2, length, k): ...
    def getBondParameters(self, index): ...
    def setBondParameters(self, index, particle1, particle2, length, k): ...
    def updateParametersInContext(self, context): ...
    def setUsesPeriodicBoundaryConditions(self, periodic): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class CustomGBForce(Force):
    thisown: Any
    NoCutoff: Any
    CutoffNonPeriodic: Any
    CutoffPeriodic: Any
    SingleParticle: Any
    ParticlePair: Any
    ParticlePairNoExclusions: Any
    __swig_destroy__: Any
    def getNumParticles(self): ...
    def getNumExclusions(self): ...
    def getNumPerParticleParameters(self): ...
    def getNumGlobalParameters(self): ...
    def getNumEnergyParameterDerivatives(self): ...
    def getNumTabulatedFunctions(self): ...
    def getNumFunctions(self): ...
    def getNumComputedValues(self): ...
    def getNumEnergyTerms(self): ...
    def getNonbondedMethod(self): ...
    def setNonbondedMethod(self, method): ...
    def getCutoffDistance(self): ...
    def setCutoffDistance(self, distance): ...
    def addPerParticleParameter(self, name): ...
    def getPerParticleParameterName(self, index): ...
    def setPerParticleParameterName(self, index, name): ...
    def addGlobalParameter(self, name, defaultValue): ...
    def getGlobalParameterName(self, index): ...
    def setGlobalParameterName(self, index, name): ...
    def getGlobalParameterDefaultValue(self, index): ...
    def setGlobalParameterDefaultValue(self, index, defaultValue): ...
    def addEnergyParameterDerivative(self, name): ...
    def getEnergyParameterDerivativeName(self, index): ...
    def addParticle(self, *args): ...
    def getParticleParameters(self, index): ...
    def setParticleParameters(self, index, parameters): ...
    def addComputedValue(self, name, expression, type): ...
    def getComputedValueParameters(self, index): ...
    def setComputedValueParameters(self, index, name, expression, type): ...
    def addEnergyTerm(self, expression, type): ...
    def getEnergyTermParameters(self, index): ...
    def setEnergyTermParameters(self, index, expression, type): ...
    def addExclusion(self, particle1, particle2): ...
    def getExclusionParticles(self, index): ...
    def setExclusionParticles(self, index, particle1, particle2): ...
    def addTabulatedFunction(self, name, function): ...
    def getTabulatedFunction(self, *args): ...
    def getTabulatedFunctionName(self, index): ...
    def addFunction(self, name, values, min, max): ...
    def getFunctionParameters(self, index): ...
    def setFunctionParameters(self, index, name, values, min, max): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...

class DrudeLangevinIntegrator(DrudeIntegrator):
    thisown: Any
    def getTemperature(self): ...
    def setTemperature(self, temp): ...
    def getFriction(self): ...
    def setFriction(self, coeff): ...
    def getDrudeFriction(self): ...
    def setDrudeFriction(self, coeff): ...
    def step(self, steps): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class RMSDForce(Force):
    thisown: Any
    def getReferencePositions(self): ...
    def setReferencePositions(self, positions): ...
    def getParticles(self): ...
    def setParticles(self, particles): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class SerializationProxy:
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any
    @staticmethod
    def registerProxy(type, proxy): ...
    @staticmethod
    def getProxy(*args): ...
    def getTypeName(self): ...
    def serialize(self, object, node): ...
    def deserialize(self, node): ...

def SerializationProxy_registerProxy(type, proxy): ...
def SerializationProxy_getProxy(*args): ...

class CustomExternalForce(Force):
    thisown: Any
    def getNumParticles(self): ...
    def getNumPerParticleParameters(self): ...
    def getNumGlobalParameters(self): ...
    def getEnergyFunction(self): ...
    def setEnergyFunction(self, energy): ...
    def addPerParticleParameter(self, name): ...
    def getPerParticleParameterName(self, index): ...
    def setPerParticleParameterName(self, index, name): ...
    def addGlobalParameter(self, name, defaultValue): ...
    def getGlobalParameterName(self, index): ...
    def setGlobalParameterName(self, index, name): ...
    def getGlobalParameterDefaultValue(self, index): ...
    def setGlobalParameterDefaultValue(self, index, defaultValue): ...
    def addParticle(self, *args): ...
    def getParticleParameters(self, index): ...
    def setParticleParameters(self, *args): ...
    def updateParametersInContext(self, context): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class Continuous2DFunction(TabulatedFunction):
    thisown: Any
    def __init__(
        self, xsize, ysize, values, xmin, xmax, ymin, ymax, periodic: bool = ...
    ) -> None: ...
    def getFunctionParameters(self): ...
    def setFunctionParameters(self, xsize, ysize, values, xmin, xmax, ymin, ymax): ...
    def Copy(self): ...
    def __eq__(self, other): ...
    __swig_destroy__: Any

class CMMotionRemover(Force):
    thisown: Any
    def getFrequency(self): ...
    def setFrequency(self, freq): ...
    def usesPeriodicBoundaryConditions(self): ...
    def __init__(self, *args) -> None: ...
    __swig_destroy__: Any

class Platform:
    thisown: Any
    def __init__(self, *args, **kwargs) -> None: ...
    __swig_destroy__: Any
    @staticmethod
    def registerPlatform(platform): ...
    @staticmethod
    def getNumPlatforms(): ...
    @staticmethod
    def getPlatform(index): ...
    @staticmethod
    def getPluginLoadFailures(): ...
    @staticmethod
    def getPlatformByName(name): ...
    @staticmethod
    def findPlatform(kernelNames): ...
    @staticmethod
    def loadPluginLibrary(file): ...
    @staticmethod
    def loadPluginsFromDirectory(directory): ...
    @staticmethod
    def getDefaultPluginsDirectory(): ...
    @staticmethod
    def getOpenMMVersion(): ...
    def getName(self): ...
    def getSpeed(self): ...
    def supportsDoublePrecision(self): ...
    def getPropertyNames(self): ...
    def getPropertyValue(self, context, property): ...
    def setPropertyValue(self, context, property, value): ...
    def getPropertyDefaultValue(self, property): ...
    def setPropertyDefaultValue(self, property, value): ...
    def linkedContextCreated(self, context, originalContext): ...
    def supportsKernels(self, kernelNames): ...

def Platform_registerPlatform(platform): ...
def Platform_getNumPlatforms(): ...
def Platform_getPlatform(index): ...
def Platform_getPluginLoadFailures(): ...
def Platform_getPlatformByName(name): ...
def Platform_findPlatform(kernelNames): ...
def Platform_loadPluginLibrary(file): ...
def Platform_loadPluginsFromDirectory(directory): ...
def Platform_getDefaultPluginsDirectory(): ...
def Platform_getOpenMMVersion(): ...
